# -*- coding: utf-8 -*-
"""run.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Bf-u1G7PlA_9MJHO2bdTvmZYBFw6nKZ
"""

import numpy as np
import cv2
import os 
import argparse
parser = argparse.ArgumentParser()
    parser.add_argument('--imgs-path', type=str,  help='path to folder containing images of details to be classified')
    args = parser.parse_args()
path2imgs = args.imgs_path


def main():
  # iterare over all images in the folder
  for img in os.listdir(path2imgs):
    # read and show image to be classified
    sample = cv2.imread(os.path.join(path2imgs,img))
    cv2.imshow('Image',sample)
    # calculate channel-wise mean value for every image pixel  
    sample = np.mean(sample,axis = 2)
    # create and show grayscale mask segmenting the detail in the image
    pixel_threshold = 25 # i empirically got the value ditinguishing the detail from background   
    mask = np.where(sample<pixel_threshold,0,255)
    cv2.imshow('Grayscale_mask',mask)
    cv2.waitKey(1500)
    cv2.destroyAllWindows()
    # count how many pixels represent background and calculate the detail square to image square ratio
    nonzero = np.count_nonzero(mask)
    ratio = 1-nonzero/(mask.shape[0]*mask.shape[1])
    threshold = 0.005 # i empirically got the value ditinguishing big detail ratio from small detail ratio
    label = 'big' if ratio > threshold else 'small'
    print('Image with name {} contains {} detail'.format(img,label))

if __name__ == "__main__":
  main()